{"version":3,"sources":["logo.svg","router/todo.js","router/life.js","router/nomatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todo","props","handleInput","e","setState","text","target","value","handleSubmit","preventDefault","state","list","handleRemove","splice","id","Form","onSubmit","this","Group","Label","Control","type","placeholder","onChange","ListGroup","map","item","index","Item","action","onClick","variant","Component","life","handleOnChange","name","console","log","nextprops","nextState","prevProps","prevState","FormControl","className","nextProps","nomatch","App","src","logo","alt","basename","process","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7bf8ef9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport {Form, ListGroup} from 'react-bootstrap';\r\n\r\nclass todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: [],\r\n            text: \"\"\r\n        }\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({text: e.target.value});\r\n        // console.log(this.state.text);\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.text !== \"\") {\r\n            this.setState({\r\n                list: [\r\n                    {\r\n                        value: this.state.text\r\n                    },\r\n                    ...this.state.list\r\n                ],\r\n                text: \"\"\r\n            });\r\n            // console.log(this.state.list);\r\n        }\r\n    }\r\n    handleRemove = (e) => {\r\n        // console.log(e.target.id);\r\n        this\r\n            .state\r\n            .list\r\n            .splice(e.target.id, 1)\r\n        this.setState({list: this.state.list})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Todo List</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Write down things to do\"\r\n                            onChange={this.handleInput}\r\n                            value={this.state.text}/>\r\n                    </Form.Group>\r\n                </Form>\r\n                <ListGroup>\r\n                    {\r\n                        this\r\n                            .state\r\n                            .list\r\n                            .map((item, index) => (\r\n                                <ListGroup.Item\r\n                                    action\r\n                                    id={index}\r\n                                    onClick={this.handleRemove}\r\n                                    variant=\"primary\">{item.value}</ListGroup.Item>\r\n                            ))\r\n                    }\r\n                </ListGroup>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default todo;","import React, {Component} from 'react';\r\nimport {FormControl} from 'react-bootstrap';\r\n\r\nclass life extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\"\r\n        }\r\n        console.log(\"Constructor Method 호출\");\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        console.log(\"getDerivedStateFromProps 호출\");\r\n    }\r\n\r\n    shouldComponentUpdate(nextprops, nextState) {\r\n        console.log(\"sholudComponetUpdate 호출\")\r\n        return true;\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log(\"getSnapshotBeforeUpdate 호출\")\r\n        return null;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"componentDidUpdate 호출\");\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        this.setState({name: e.target.value})\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render 호출\")\r\n        return (\r\n            <div>\r\n                <FormControl placeholder=\"write something\" onChange={this.handleOnChange}></FormControl>\r\n                <h1 className=\"pt-3\">Rendering Text : {this.state.name}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default life;","import React from 'react';\r\n\r\nfunction nomatch() {\r\n    return (\r\n        <div>\r\n            <h>404</h>\r\n            <p>page not found</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default nomatch;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport Todo from \"./router/todo\";\r\nimport Life from \"./router/life\";\r\nimport Nomatch from \"./router/nomatch\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <div>\r\n                        <nav>\r\n                            <ul>\r\n                                <li>\r\n                                    <Link to=\"/\">Home</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to=\"/todo\">Todo List</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to=\"/life\">Lifecycle API</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                        <Switch>\r\n                            <Route exact path=\"/\"></Route>\r\n                            <Route path=\"/todo\">\r\n                                <Todo/>\r\n                            </Route>\r\n                            <Route path=\"/life\">\r\n                                <Life/>\r\n                            </Route>\r\n                            <Route path=\"*\">\r\n                                <Nomatch/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                </Router>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}